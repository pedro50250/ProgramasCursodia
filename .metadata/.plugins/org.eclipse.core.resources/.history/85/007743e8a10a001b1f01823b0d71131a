package ServerPrueba;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.spec.KeySpec;
import java.sql.Timestamp;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class HiloMensajes implements Runnable{

	private Cliente cli;
	private ModeloChat modelo;
	private  String secretKey = "Encriptafo!!!!";
	private  String salt = "abcd!!!!";
	
	public HiloMensajes(Cliente cli,ModeloChat modelo)
	{
		this.cli = cli;
		this.modelo = modelo;
	}
	
	@Override
	public void run() {
		ServerSocket ss;
		while(true)
		{
			try {
				ss = new ServerSocket(this.cli.getPuertoRecibirMensaje());
				Socket socketRecibir = ss.accept();
				ObjectInputStream ois = new ObjectInputStream(socketRecibir.getInputStream());
				String mensaje = this.decrypt((String) ois.readObject());
				if (mensaje != null || mensaje != "") {
					System.out.println(cli.getNomCliente() + " dice: " + mensaje);
					this.modelo.mensajeNuevo = mensaje;
					this.modelo.Mensaje = true;
					Timestamp timestamp = new Timestamp(System.currentTimeMillis());
					Mensaje mn = new Mensaje(mensaje,cli.getNomCliente(),timestamp,cli);
					this.modelo.mensajes.add(mn);
				}
				socketRecibir.close();
				ss.close();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public Cliente getCli() {
		return cli;
	}

	public void setCli(Cliente cli) {
		this.cli = cli;
	}
	
	public  String decrypt(String strToDecrypt) {
	    try
	    {
	        byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	        IvParameterSpec ivspec = new IvParameterSpec(iv);
	         
	        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
	        KeySpec spec = new PBEKeySpec(secretKey.toCharArray(), salt.getBytes(), 65536, 256);
	        SecretKey tmp = factory.generateSecret(spec);
	        SecretKeySpec secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");
	         
	        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
	        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivspec);
	        return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
	    } 
	    catch (Exception e) {
	        System.out.println("Error while decrypting: " + e.toString());
	    }
	    return null;
	}
	
}
