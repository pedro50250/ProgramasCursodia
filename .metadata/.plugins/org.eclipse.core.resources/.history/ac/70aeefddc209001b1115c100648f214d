package ServerPrueba;

import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.Timestamp;
import java.util.ArrayList;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

public class ModeloChat {

	
	int puertoLocal = 5432;
	int puertoRecibirMensaje=1000;
	String nombre;
	boolean usuarioConectado = false;
	String mensajeNuevo = "";
	boolean Mensaje = false;
	boolean primerConectado=false;
	ArrayList<Cliente> clientes;
	ArrayList<Mensaje> mensajes= new ArrayList<Mensaje>();
	Timestamp horaUltimoMensaje;
	boolean nuevoConectado = false;
	Cliente nuevoClienteConectado;
	boolean sonido;

	public void RecibirConexiones() {
		HiloConexiones hilo = new HiloConexiones(this);
		Thread hil = new Thread(hilo);
		hil.start();
	}
	
	public void IniciarHiloMensajes(Cliente cli)
	{
		HiloMensajes hilo = new HiloMensajes(cli,this);
		Thread hil = new Thread(hilo);
		hil.start();
	}

	/*public void enviarMensajes(String mensaje) {
		if (this.usuarioConectado == true) {
			try {
				for (Cliente cli : this.clientes) {
					Socket s = new Socket(cli.getIpAddress(), cli.getPuertoRemoto());
					ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
					oos.writeObject(mensaje);
					oos.close();
				}

			} catch (Exception ex) {
				ex.printStackTrace();
			}
		} else {
			System.out.println("Desconectado");
		}

	}*/
	
	public void enviarMensajes(String mens) {
		if (this.usuarioConectado == true) {
			try {
				for (Cliente cli : this.clientes) {
					Socket s = new Socket(cli.getIpAddress(), cli.getPuertoRemoto());
					ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
					oos.writeObject("" +this.nombre);
					oos.writeObject(mens);
					oos.close();
				}

			} catch (Exception ex) {
				ex.printStackTrace();
			}
		} else {
			System.out.println("Desconectado");
		}

	}

	public void ReproducirSonidoEnviar() {
		if (this.sonido) {
			AudioInputStream stream;
			AudioFormat format;
			DataLine.Info info;
			Clip clip;
			try {
				stream = AudioSystem.getAudioInputStream(new File("Sonidos/Enviar.wav"));
				format = stream.getFormat();
				info = new DataLine.Info(Clip.class, format);
				clip = (Clip) AudioSystem.getLine(info);
				clip.open(stream);
				clip.start();
			} catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
				e.printStackTrace();
			}
		}

	}

	public void ReproducirSonidoRecibir() {
		if (this.sonido) {
			AudioInputStream stream;
			AudioFormat format;
			DataLine.Info info;
			Clip clip;
			try {
				stream = AudioSystem.getAudioInputStream(new File("Sonidos/Recibir.wav"));
				format = stream.getFormat();
				info = new DataLine.Info(Clip.class, format);
				clip = (Clip) AudioSystem.getLine(info);
				clip.open(stream);
				clip.start();
			} catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void ReenviarMensaje(Mensaje mensaje) {
		
		for(Cliente cli: this.clientes)
		{
			if(!cli.getNomCliente().equals(mensaje.getCli().getNomCliente()))
			{
				Socket s;
				try {
					s = new Socket(cli.getIpAddress(), cli.getPuertoRemoto());
					ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
					String nombre = mensaje.getCli().getNomCliente();
					String mensajee = mensaje.getMensaje();
					oos.writeObject(nombre);
					oos.writeObject(mensajee);
					oos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

}
